// *******************************
// include script confirmAlerts.js
// since 5.5, this resource is deprecated and kept empty here for
// compatibility: confirm alerts and associated translation mechanism are
// now handled by confirm-alerts.xhtml for default confirm alerts, and
// custom-confirm-alerts.xhtml (both included by includes.xhtml)

// *******************************
// include script DragAndDrop.js
function moveElement(element,containerId){
    //Seam.Remoting.contextPath = "/nuxeo";
    Seam.Remoting.getContext().setConversationId(currentConversationId);
    Seam.Component.getInstance("FileManageActions").moveWithId(element.id,containerId,moveCallback);
}

function copyElement(element){
    //Seam.Remoting.contextPath = "/nuxeo";
    Seam.Remoting.getContext().setConversationId(currentConversationId);
    Seam.Component.getInstance("FileManageActions").copyWithId(element.id,copyCallback);
}

function copyElementIfIdNotStartsWith(element, idPrefix){
    //Seam.Remoting.contextPath = "/nuxeo";
    if (element && element.id.indexOf(idPrefix) <= -1) {
        Seam.Remoting.getContext().setConversationId(currentConversationId);
        Seam.Component.getInstance("FileManageActions").copyWithId(element.id,copyCallback);    	
    }
}

function pasteElement(element){
    //Seam.Remoting.contextPath = "/nuxeo";
    Seam.Remoting.getContext().setConversationId(currentConversationId);
    Seam.Component.getInstance("FileManageActions").pasteWithId(element.id,pasteCallback);
}

// CallBack from the Seam AJAX request
var result;
function moveCallback(result) {
    var moveTrans = "MOVE_ERROR";
    doRefreshPage();
    if(typeof(result)!="undefined"){
        if(result.substring(0,moveTrans.length)==moveTrans){
           alert(result.substring(moveTrans.length,result.length));
        }
    } else{
        alert("undefined result in moveCallback")
    }
}

// CallBack from the Seam AJAX request
var result;
function copyCallback(result) {
    var moveTrans = "COPY_ERROR";
    doRefreshPage();
    if(typeof(result)!="undefined"){
        if(result.substring(0,moveTrans.length)==moveTrans){
           alert(result.substring(moveTrans.length,result.length));
        }
    } else{
        alert("undefined result in copyCallback")
    }
}

// CallBack from the Seam AJAX request
var result;
function pasteCallback(result) {
    var moveTrans = "PASTE_ERROR";
    doRefreshPage();
    if(typeof(result)!="undefined"){
        if(result.substring(0,moveTrans.length)==moveTrans){
           alert(result.substring(moveTrans.length,result.length));
        }
    } else{
        alert("undefined result in pasteCallback")
    }
}

// Refresh page and takes care of conversation propagation
function doRefreshPage()
{
    var cUrl=window.location.href;
    if (cUrl.indexOf(currentConversationId)<0)
    {
        if (cUrl.indexOf("?")>0)
            cUrl+="?conversationId=" + currentConversationId;
        else
            cUrl+="&conversationId=" + currentConversationId;
    }
    window.location.href=cUrl;
}

// *******************************
// include script tableSelections.js
var lastSelectedCheckBox = null;
var lastSelectAll = null;
var lastTableName = null;

function handleAllCheckBoxes(tableName, checked) {
  var table = document.getElementById(tableName);
  var listOfInputs = table.getElementsByTagName("input");
  for(var i = 0; i < listOfInputs.length; i++ ){
    if (listOfInputs[i].type == "checkbox"){
      listOfInputs[i].checked = checked;
    }
  }
}

function selectDataTableRowCB(result) {
  if(typeof(result) != "undefined") {
    if (result.indexOf("ERROR") == 0) {
      // should never occur if the application if providers are configured
      // properly
      alert(result);
      if (lastSelectedCheckBox) {
        lastSelectedCheckBox.checked = !lastSelectedCheckBox.checked;
      }
    }
    else {
      var actionsId = result.split("|");
      enableActions(actionsId);
    }
  }
}

function selectDataTablePageCB(result) {
  if(typeof(result) != "undefined") {
    if (result.indexOf("ERROR") == 0) {
      // should never occur if the application if providers are configured
      // properly
      alert(result);
      if (lastSelectAll != null) {
        handleAllCheckBoxes(lastTableName,!lastSelectAll);
      }
    }
    else {
      var actionsIds = result.split("|");
      enableActions(actionsIds);
    }
  }
}

function enableActions(actionsId) {
  var buttonDiv = document.getElementById("selection_buttons");
  if (buttonDiv) {
    var nodes = buttonDiv.childNodes;
    for (var i=0; i<nodes.length; i++) {
      node = nodes[i];
      if (node.tagName == "SPAN") {
        actionId = node.id.split(":")[0];
        enabled = isActionEnabled(actionId, actionsId);
        if (enabled) {
          node.childNodes[0].removeAttribute("disabled");
        }
        else {
          node.childNodes[0].setAttribute("disabled", "disabled");
        }
      }
    }
  }
}

function isActionEnabled(actionId, actionsId) {
  for (var i=0; i<actionsId.length; i++) {
    if (actionsId[i] == actionId) {
      return true;
    }
  }
  return false;
}

// *******************************
// include script customSeamRemotingWaiter.js
// Overload default Seam Remoting waiter message

Seam.Remoting.loadingMsgDiv = null;
Seam.Remoting.displayLoadingMessage = function()
{
  if (!Seam.Remoting.loadingMsgDiv)
  {
    Seam.Remoting.loadingMsgDiv = document.createElement('div');
    var msgDiv = Seam.Remoting.loadingMsgDiv;
    msgDiv.setAttribute('id', 'loadingMsg');

    msgDiv.style.position = "absolute";
    msgDiv.style.top = "0px";
    msgDiv.style.right = "0px";

    document.body.appendChild(msgDiv);

    var img = document.createElement("img");
    img.src= baseURL + "img/standart_waiter.gif";
    msgDiv.appendChild(img);
  }
  else
  {
    Seam.Remoting.loadingMsgDiv.style.visibility = 'visible';
  }
}

Seam.Remoting.hideLoadingMessage = function()
{
  if (Seam.Remoting.loadingMsgDiv)
    Seam.Remoting.loadingMsgDiv.style.visibility = 'hidden';
}

// *******************************
// include script custom-javascript.js
// this script is designed to be overloaded by third-party projects
// it is included by includes.xhtml

// *******************************
// include script default-contextmenu-actions.js
// helper functions
function navigationCB(url)
{
 if (url.indexOf("http")<0) {
   url= getBaseURL() + url;
 }
 window.location.href=url;
}

function trim (myString)
{
 return myString.replace(/^\s+/g,'').replace(/\s+$/g,'')
}

function navigateOnPopupDoc2(tabId, subTabId)
{
   Seam.Component.getInstance("popupHelper").getNavigationURLOnPopupdoc2(tabId,subTabId,navigationCB);
}

function navigateOnPopupDoc(tabId)
{
    Seam.Component.getInstance("popupHelper").getNavigationURLOnPopupdoc(tabId,navigationCB);
}

function navigateOnContainerDoc(tabId)
{
    Seam.Component.getInstance("popupHelper").getNavigationURLOnContainer(tabId,navigationCB);
}

function navigateOnDoc(docId, tabId)
{
    Seam.Component.getInstance("popupHelper").getNavigationURL(docId,tabId,navigationCB);
}

function refreshPage()
{
    Seam.Component.getInstance("popupHelper").getCurrentURL(navigationCB);
}

function reloadPage() {
  document.location.reload();
}

function refreshPageAfterDelete()
{
  Seam.Component.getInstance("popupHelper").getCurrentURLAfterDelete(navigationCB);
}

// menu actions callbacks
function doCopy(docid)
{
 Seam.Component.getInstance("clipboardActions").putInClipboard(docid,reloadPage);
}

function doPaste(docid)
{
    Seam.Component.getInstance("clipboardActions").pasteClipboardInside(docid,refreshPage);
}

function doMove(docid)
{
    Seam.Component.getInstance("clipboardActions").moveClipboardInside(docid,refreshPage);
}

function doDelete(docid)
{
  if (confirmDeleteDocuments()) {
    Seam.Component.getInstance("popupHelper").deleteDocument(docid,refreshPageAfterDelete);
    }
}

function doView(docid)
{
  navigateOnPopupDoc();
}

function doEdit(docid)
{
  navigateOnPopupDoc('TAB_EDIT');
}

function doRename(docid)
{
 span=document.getElementById('title_'+docid);
 input = document.createElement('input');
 if (span.id != '')
    input.id = span.id;
 input.className = span.className;
 span.parentNode.replaceChild(input,span);
 input.value = trim(span.innerHTML);
 input.onkeydown = function (event) {
        onEditKeyPress(event);
 };
 input.focus();
}

function doAccessRights(docid) {
  navigateOnPopupDoc2('TAB_MANAGE','TAB_RIGHTS');
}

function doPreview(docid) {
  navigateOnPopupDoc('TAB_PREVIEW');
}

function doPreviewPopup(docid) {
  Seam.Component.getInstance("previewActions").getPreviewPopupURL(docid, function(result) {
    openFancyBox(result);
  });
}

function doDownload(docid) {
  Seam.Component.getInstance("popupHelper").downloadDocument(docid, 'file:content', 'file:filename', navigationCB);
}

function doWorkflow(docid) {
  navigateOnPopupDoc('TAB_CONTENT_JBPM');
}

function doLock(docid){
  Seam.Component.getInstance("popupHelper").lockDocument(docid, refreshPage);
}

function doUnlock(docid){
  Seam.Component.getInstance("popupHelper").unlockDocument(docid, refreshPage);
}

function doSendEmail(docid){
  Seam.Component.getInstance("popupHelper").sendEmail(docid, navigationCB);
}


function onEditKeyPress(event)
{
if(!event) event = window.event;
var keyCode = (event.which) ? event.which: event.keyCode;
var target = (event.target) ? event.target: event.srcElement;
if (keyCode == 13)
 saveRename(target);
}

function saveRenameCallback(result)
{
 if (result!="OK")
   refreshPage()
}

function saveRename(target)
{
 input = target;
 span = document.createElement('span');
 input.parentNode.replaceChild(span,input);
 span.innerHTML = input.value;
 span.className = input.className;
 if (input.id != '')
    span.id = input.id;

 docid = span.id.replace('title_','');
 Seam.Component.getInstance("popupHelper").editTitle(docid,input.value,saveRenameCallback);
}


// *******************************
// include script custom-contextmenu-actions.js
// this script is designed to be overloaded by third-party projects
// it can receive javascript functions called by contextmenu actions

